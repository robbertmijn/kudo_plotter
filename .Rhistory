p3 <- ggplot(data = data.frame(x = c(500, 1000)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 800, sd = 100)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 800, sd = 100), geom = "area", fill = "green", alpha = .8, xlim = c(750*.85, 750*1.15)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 800, sd = 100), geom = "area", fill = "pink", alpha = .8, xlim = c(500, 750*.85)) +
scale_y_continuous(breaks = NULL) +
ylab("") +
xlab("") +
theme(axis.line.y = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
geom_vline(xintercept = c(750*.85, 750*1.15), linetype = 2) +
scale_x_continuous(limits = c(500, 1000))
pdf("tur_pres.pdf", height = 4, width = 4)
(p1+p2+p3)/(p4+p5+p6) +
plot_layout(heights = c(1,2))
dev.off()
setwd("/Volumes/GoogleDrive/My Drive/projecten/scary_movie_timing/analysis")
library(data.table)
library(ggplot2)
theme_set(theme_classic())
library(lme4)
library(emmeans)
library(mgcv)
library(itsadug)
library(gridExtra)
library(xtable)
# Our preprocessed data
load("scary_movie_dat.rdata")
load("conjuring2_dat.rdata")
# Load all our custom functions
source("scary_movie_functions.R")
# Create a subset of the data that excluded practice trials and outliers
subset <- timingdat[outlier_repr_bypp == 0 & outlier_rt == 0]
nrow(timingdat[outlier_repr_bypp == 1])/nrow(timingdat[!is.na(outlier_repr_bypp)])
nrow(timingdat[outlier_rt == 1])/nrow(timingdat[!is.na(outlier_rt)])
moviedat[, block_mean := mean(rating), by = block]
# pdf("f2_ratings.pdf", width = 6.25, height = 3)
ggplot(moviedat, aes(x = t_film/1000/60)) +
geom_vline(data = moviedat[jumpscare_state == 1], aes(xintercept = t_film/1000/60), alpha = .5, linetype = 2) +
geom_ribbon(aes(ymin = rating - sd, ymax = rating + sd, fill = block), alpha = .5) +
geom_line(aes(y = rating, color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Time (minutes)", y = "Fear Rating")
# dev.off()
pdf("f2_ratings_pres.pdf", width = 9, height = 3)
ggplot(moviedat, aes(x = t_film/1000/60)) +
geom_vline(data = moviedat[jumpscare_state == 1], aes(xintercept = t_film/1000/60), alpha = .5, linetype = 2) +
geom_ribbon(aes(ymin = rating - sd, ymax = rating + sd, fill = block), alpha = .5) +
geom_line(aes(y = rating, color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Time (minutes)", y = "Fear Rating")
dev.off()
moviedat[, block_mean := mean(rating), by = block]
pdf("f2_ratings_pres.pdf", width = 11, height = 3)
ggplot(moviedat, aes(x = t_film/1000/60)) +
geom_vline(data = moviedat[jumpscare_state == 1], aes(xintercept = t_film/1000/60), alpha = .5, linetype = 2) +
geom_ribbon(aes(ymin = rating - sd, ymax = rating + sd, fill = block), alpha = .5) +
geom_line(aes(y = rating, color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Time (minutes)", y = "Fear Rating")
dev.off()
# Chunk 1
library(data.table)
library(ggplot2)
theme_set(theme_classic())
library(lme4)
library(emmeans)
library(mgcv)
library(itsadug)
library(gridExtra)
library(xtable)
# Our preprocessed data
load("scary_movie_dat.rdata")
load("conjuring2_dat.rdata")
# Load all our custom functions
source("scary_movie_functions.R")
# Create a subset of the data that excluded practice trials and outliers
subset <- timingdat[outlier_repr_bypp == 0 & outlier_rt == 0]
nrow(timingdat[outlier_repr_bypp == 1])/nrow(timingdat[!is.na(outlier_repr_bypp)])
nrow(timingdat[outlier_rt == 1])/nrow(timingdat[!is.na(outlier_rt)])
# Chunk 2
ggplot(timingdat[pp != 15], aes(x = t_down_experiment/1000/60, y = reproduction, color = practice)) +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
geom_point(size = .5, alpha = .7) +
scale_y_continuous(limits = c(0, 3000)) +
facet_wrap(~pp) +
labs(title = "scary movie, per participant", x = "Minutes", y = "Reproduction (ms)")
pracdat <- timingdat[clip_name == "practice" & !(pp %in% c("1", "15"))]
pracdat[probe == 0, pblock := 1:.N, by = pp]
pracdat[, pblock := nafill(pblock, "locf")]
pracdat <- pracdat[, .N, by = .(pp, pblock)]
pracdat[, .(trials = mean(N))]
ggplot(pracdat, aes(x = pblock, y = N)) +
geom_jitter(stat = "identity", width = .05, height = .05, alpha = .6) +
geom_line(aes(group = pp)) +
labs(x = "Practice Block", y = "Number of practice trials needed")
# Chunk 3
moviedat[, block_mean := mean(rating), by = block]
pdf("f2_ratings_pres.pdf", width = 11, height = 3)
ggplot(moviedat, aes(x = t_film/1000/60)) +
geom_vline(data = moviedat[jumpscare_state == 1], aes(xintercept = t_film/1000/60), alpha = .5, linetype = 2) +
geom_ribbon(aes(ymin = rating - sd, ymax = rating + sd, fill = block), alpha = .5) +
geom_line(aes(y = rating, color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Time (minutes)", y = "Fear Rating")
dev.off()
# Chunk 4
plotdata <- subset[t_down_film %between% c(28*1000*60, 29.2*1000*60)]
ggplot(moviedat, aes(x = t_film/1000/60)) +
geom_line(aes(y = rating)) +
geom_line(aes(y = jumpscare_state), linetype = 2) +
geom_point(data = plotdata, aes(x = t_down_film/1000/60, y = .5), color = "darkgreen", alpha = .4) +
scale_x_continuous(limits = c(28, 29.1)) +
labs(x = "Time (minutes)", y = "Rating", title = "Fear Ratings (zoomed in)")
# Chunk 5
ggplot(mapping = aes(x = t_down_film/1000/60, y = reproduction, color = block)) +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
geom_point(data = subset, alpha = .2, stroke = 0) +
guides(color = guide_legend(override.aes = list(alpha=1))) +
scale_color_brewer(palette = "Set1") +
scale_y_continuous(limits = c(0, 3000)) +
labs(x = "Minutes", y = "Reproduction (ms)", color = "Block")
m0 <- lm(data = subset, reproduction ~ 1)
# intercept only model, we just try to predict reproduction based on general over or underestimations of each participant
m.pp <- lmer(data = subset, reproduction ~ 1 + (1|pp), REML = F)
m.pp.reml <- lmer(data = subset, reproduction ~ 1 + (1|pp), REML = T)
# intercept and slope added
m.block <- lmer(data = subset, reproduction ~ block + (1|pp), REML = F)
# calculate Bayes Factor
anova(m.pp, m.block, refit = F)
exp((BIC(m0) - BIC(m.pp))/2)
exp((BIC(m.pp) - BIC(m.block))/2)
summary(m.block)
m.block.reml <- lmer(data = subset, reproduction ~ block + (1|pp), REML = T)
m.block.reml2 <- lmer(data = subset, reproduction ~ block + (block|pp), REML = T)
anova(m.block.reml, m.block.reml2, refit = F)
exp((BIC(m.block.reml) - BIC(m.block.reml2))/2)
m.block <- lmer(data = subset, reproduction ~ block + (block|pp), REML = F)
# Chunk 6
subset[, fear_bin_1000.c := (fear_bin_1000 - mean(fear_bin_1000))]
# add rating to the previous model
m.block.fear <- lmer(data = subset, reproduction ~ block + fear_bin_1000.c + (block|pp), REML = F)
anova(m.block, m.block.fear)
exp((BIC(m.block) - BIC(m.block.fear))/2)
# Chunk 7
m.block.fear.reml <- lmer(data = subset, reproduction ~ block + fear_bin_1000.c + (block|pp), REML = T)
m.block.fear.reml2 <- lmer(data = subset, reproduction ~ block + fear_bin_1000.c + (block + fear_bin_1000.c|pp), REML = T)
anova(m.block.fear.reml, m.block.fear.reml2, refit = F)
exp((BIC(m.block.fear.reml) - BIC(m.block.fear.reml2))/2)
# Chunk 8
m.block.fear <- lmer(data = subset, reproduction ~ block + fear_bin_1000.c + (block + fear_bin_1000.c|pp), REML = F)
m.block.fear.int <- lmer(data = subset, reproduction ~ block * fear_bin_1000.c + (block + fear_bin_1000.c|pp), REML = F)
anova(m.block.fear, m.block.fear.int, refit = F)
exp((BIC(m.block.fear) - BIC(m.block.fear.int))/2)
# Chunk 9
summary(m.block.fear)
xtable(summary(m.block.fear)$coefficients, caption = "caption", label = "tab:lmer")
lmer_plot_dat_sustained <- data.table(data.frame(emmeans(m.block.fear,
specs = c("block", "fear_bin_1000.c"),
at = list(fear_bin_1000.c = seq(min(subset$fear_bin_1000.c), max(subset$fear_bin_1000.c), length.out = 100))
)))[, .(block, fear_bin_1000.c, reproduction = emmean, ul = asymp.UCL, ll = asymp.LCL, mod = "lmer")]
pdf("lmer_sustained.pdf", width = 3.125, height = 3)
ggplot(subset, aes(x = fear_bin_1000.c, y = reproduction)) +
# geom_point(alpha = .1, stroke = 0) +
geom_ribbon(data = lmer_plot_dat_sustained, aes(fill = block, ymin = ll, ymax = ul), alpha = .2) +
geom_line(data = lmer_plot_dat_sustained, aes(color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
scale_y_continuous(limits = c(1000, 2000)) +
labs(x = "Fear", y = "Reproduction (ms)")
dev.off()
# Chunk 10
subset[, JS_bin_1000.c := (JS_bin_1000 - mean(JS_bin_1000))]
# add rating to the previous model
m.block.js <- lmer(data = subset, reproduction ~ block + JS_bin_1000.c + (block|pp), REML = F)
# calculate Bayes Factor
anova(m.block, m.block.js)
exp((BIC(m.block) - BIC(m.block.js))/2)
summary(m.block.js)
# lmer_plot_dat_acute <- data.table(data.frame(emmeans(m.block.js,
#                                              specs = c("block", "JS_bin_1000.c"),
#                                              at = list(JS_bin_1000.c = seq(min(subset$JS_bin_1000.c), max(subset$JS_bin_1000.c), length.out = 100))
# )))[, .(block, JS_bin_1000.c, reproduction = emmean, ul = asymp.UCL, ll = asymp.LCL, mod = "lmer")]
#
# lmer_plot_acute <- ggplot(subset, aes(x = JS_bin_1000.c, y = reproduction)) +
#   # geom_point(alpha = .1, stroke = 0) +
#   geom_ribbon(data = lmer_plot_dat_acute, aes(fill = block, ymin = ll, ymax = ul), alpha = .2) +
#   geom_line(data = lmer_plot_dat_acute, aes(color = block)) +
#   scale_color_brewer(palette = "Set1") +
#   scale_fill_brewer(palette = "Set1") +
#   geom_hline(yintercept = c(1217, 1610), linetype = 2) +
#   scale_y_continuous(limits = c(1000, 2000)) +
#   labs(title = "Acute Fear (BF < 1)", x = "Fear", y = "Reproduction (ms)") +
#   theme(legend.position = "none")
#
# grid.arrange(lmer_plot_sustained, lmer_plot_acute, nrow = 1)
# Chunk 11
subset[, pp := as.factor(pp)]
bam.pp <- bam(data = subset, reproduction ~ s(pp, bs = "re"), method = "ML")
bam.block <- bam(data = subset, reproduction ~ block + s(pp, by = block, bs = "re"), method = "ML")
exp((BIC(bam.pp) - BIC(bam.block))/2)
summary(bam.block)
# Chunk 12
bam.block.fear <- bam(data = subset, reproduction ~ block + s(fear_bin_1000.c) + s(pp, by = block, bs = "re"), method = "ML")
exp((BIC(bam.block) - BIC(bam.block.fear))/2)
exp((BIC(bam.block.fear) - BIC(bam.block.fear2))/2)
summary(bam.block.fear)
# Chunk 13
# refit with reml
bam.block.fear <- bam(data = subset, reproduction ~ block + s(fear_bin_1000.c) + s(pp, by = block, bs = "re"), method = "REML")
bam.block.fear2 <- bam(data = subset, reproduction ~ block + s(fear_bin_1000.c, by = block) + s(pp, by = block, bs = "re"), method = "REML")
exp((BIC(bam.block.fear) - BIC(bam.block.fear2))/2)
# Chunk 14
a <- summary(bam.block.fear)
a$s.table
c <- plot_smooth(bam.block.fear, view = "fear_bin_1000.c", plot_all = c("block"), rm.ranef = T, rug = F)
pdat <- rbind(data.table(data.frame(emmeans(m.block.fear,
specs = c("block", "fear_bin_1000.c"),
at = list(fear_bin_1000.c = seq(min(subset$fear_bin_1000.c), max(subset$fear_bin_1000.c), length.out = 100))
)))[, .(block, fear_bin_1000.c, reproduction = emmean, ul = asymp.UCL, ll = asymp.LCL, mod = "A. LMER")],
as.data.table(c$fv)[, .(block, fear_bin_1000.c, reproduction = fit, ul, ll, mod = "B. GAMM")]
)
# pdf("horror_models.pdf", width = 6.25, height = 4)
ggplot(pdat, aes(x = fear_bin_1000.c, y = reproduction)) +
geom_ribbon(aes(fill = block, ymin = ll, ymax = ul), alpha = .2) +
geom_line(aes(color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
scale_y_continuous(limits = c(1000, 2000)) +
labs(x = "Sustained fear (centered)", y = "Reproduction (ms)") +
facet_grid(~mod)
# dev.off()
# pdf("horror_models.pdf", width = 6.25, height = 4)
ggplot(pdat[mod == "B. GAMM"], aes(x = fear_bin_1000.c, y = reproduction)) +
geom_ribbon(aes(fill = block, ymin = ll, ymax = ul), alpha = .2) +
geom_line(aes(color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
scale_y_continuous(limits = c(1000, 2000)) +
labs(x = "Sustained fear (centered)", y = "Reproduction (ms)")
pdf("horror_models_pres.pdf", width = 4, height = 4)
ggplot(pdat[mod == "B. GAMM"], aes(x = fear_bin_1000.c, y = reproduction)) +
geom_ribbon(aes(fill = block, ymin = ll, ymax = ul), alpha = .2) +
geom_line(aes(color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
scale_y_continuous(limits = c(1000, 2000)) +
labs(x = "Sustained fear (centered)", y = "Reproduction (ms)")
# facet_grid(~mod)
dev.off()
setwd("/Volumes/GoogleDrive/My Drive/projecten/scary_movie_timing/analysis")
# Chunk 1
library(data.table)
library(ggplot2)
theme_set(theme_classic())
library(lme4)
library(emmeans)
library(mgcv)
library(itsadug)
library(gridExtra)
library(xtable)
# Our preprocessed data
load("scary_movie_dat.rdata")
load("conjuring2_dat.rdata")
# Load all our custom functions
source("scary_movie_functions.R")
# Create a subset of the data that excluded practice trials and outliers
subset <- timingdat[outlier_repr_bypp == 0 & outlier_rt == 0]
nrow(timingdat[outlier_repr_bypp == 1])/nrow(timingdat[!is.na(outlier_repr_bypp)])
nrow(timingdat[outlier_rt == 1])/nrow(timingdat[!is.na(outlier_rt)])
# Chunk 2
ggplot(timingdat[pp != 15], aes(x = t_down_experiment/1000/60, y = reproduction, color = practice)) +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
geom_point(size = .5, alpha = .7) +
scale_y_continuous(limits = c(0, 3000)) +
facet_wrap(~pp) +
labs(title = "scary movie, per participant", x = "Minutes", y = "Reproduction (ms)")
pracdat <- timingdat[clip_name == "practice" & !(pp %in% c("1", "15"))]
pracdat[probe == 0, pblock := 1:.N, by = pp]
pracdat[, pblock := nafill(pblock, "locf")]
pracdat <- pracdat[, .N, by = .(pp, pblock)]
pracdat[, .(trials = mean(N))]
ggplot(pracdat, aes(x = pblock, y = N)) +
geom_jitter(stat = "identity", width = .05, height = .05, alpha = .6) +
geom_line(aes(group = pp)) +
labs(x = "Practice Block", y = "Number of practice trials needed")
# Chunk 3
moviedat[, block_mean := mean(rating), by = block]
# pdf("f2_ratings.pdf", width = 6.25, height = 3)
ggplot(moviedat, aes(x = t_film/1000/60)) +
geom_vline(data = moviedat[jumpscare_state == 1], aes(xintercept = t_film/1000/60), alpha = .5, linetype = 2) +
geom_ribbon(aes(ymin = rating - sd, ymax = rating + sd, fill = block), alpha = .5) +
geom_line(aes(y = rating, color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Time (minutes)", y = "Fear Rating")
# dev.off()
# Chunk 4
plotdata <- subset[t_down_film %between% c(28*1000*60, 29.2*1000*60)]
ggplot(moviedat, aes(x = t_film/1000/60)) +
geom_line(aes(y = rating)) +
geom_line(aes(y = jumpscare_state), linetype = 2) +
geom_point(data = plotdata, aes(x = t_down_film/1000/60, y = .5), color = "darkgreen", alpha = .4) +
scale_x_continuous(limits = c(28, 29.1)) +
labs(x = "Time (minutes)", y = "Rating", title = "Fear Ratings (zoomed in)")
# Chunk 5
ggplot(mapping = aes(x = t_down_film/1000/60, y = reproduction, color = block)) +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
geom_point(data = subset, alpha = .2, stroke = 0) +
guides(color = guide_legend(override.aes = list(alpha=1))) +
scale_color_brewer(palette = "Set1") +
scale_y_continuous(limits = c(0, 3000)) +
labs(x = "Minutes", y = "Reproduction (ms)", color = "Block")
m0 <- lm(data = subset, reproduction ~ 1)
# intercept only model, we just try to predict reproduction based on general over or underestimations of each participant
m.pp <- lmer(data = subset, reproduction ~ 1 + (1|pp), REML = F)
m.pp.reml <- lmer(data = subset, reproduction ~ 1 + (1|pp), REML = T)
# intercept and slope added
m.block <- lmer(data = subset, reproduction ~ block + (1|pp), REML = F)
# calculate Bayes Factor
anova(m.pp, m.block, refit = F)
exp((BIC(m0) - BIC(m.pp))/2)
exp((BIC(m.pp) - BIC(m.block))/2)
summary(m.block)
m.block.reml <- lmer(data = subset, reproduction ~ block + (1|pp), REML = T)
m.block.reml2 <- lmer(data = subset, reproduction ~ block + (block|pp), REML = T)
anova(m.block.reml, m.block.reml2, refit = F)
exp((BIC(m.block.reml) - BIC(m.block.reml2))/2)
m.block <- lmer(data = subset, reproduction ~ block + (block|pp), REML = F)
# Chunk 6
subset[, fear_bin_1000.c := (fear_bin_1000 - mean(fear_bin_1000))]
# add rating to the previous model
m.block.fear <- lmer(data = subset, reproduction ~ block + fear_bin_1000.c + (block|pp), REML = F)
anova(m.block, m.block.fear)
exp((BIC(m.block) - BIC(m.block.fear))/2)
# Chunk 7
m.block.fear.reml <- lmer(data = subset, reproduction ~ block + fear_bin_1000.c + (block|pp), REML = T)
m.block.fear.reml2 <- lmer(data = subset, reproduction ~ block + fear_bin_1000.c + (block + fear_bin_1000.c|pp), REML = T)
anova(m.block.fear.reml, m.block.fear.reml2, refit = F)
exp((BIC(m.block.fear.reml) - BIC(m.block.fear.reml2))/2)
# Chunk 8
m.block.fear <- lmer(data = subset, reproduction ~ block + fear_bin_1000.c + (block + fear_bin_1000.c|pp), REML = F)
m.block.fear.int <- lmer(data = subset, reproduction ~ block * fear_bin_1000.c + (block + fear_bin_1000.c|pp), REML = F)
anova(m.block.fear, m.block.fear.int, refit = F)
exp((BIC(m.block.fear) - BIC(m.block.fear.int))/2)
# Chunk 9
summary(m.block.fear)
xtable(summary(m.block.fear)$coefficients, caption = "caption", label = "tab:lmer")
lmer_plot_dat_sustained <- data.table(data.frame(emmeans(m.block.fear,
specs = c("block", "fear_bin_1000.c"),
at = list(fear_bin_1000.c = seq(min(subset$fear_bin_1000.c), max(subset$fear_bin_1000.c), length.out = 100))
)))[, .(block, fear_bin_1000.c, reproduction = emmean, ul = asymp.UCL, ll = asymp.LCL, mod = "lmer")]
pdf("lmer_sustained.pdf", width = 3.125, height = 3)
ggplot(subset, aes(x = fear_bin_1000.c, y = reproduction)) +
# geom_point(alpha = .1, stroke = 0) +
geom_ribbon(data = lmer_plot_dat_sustained, aes(fill = block, ymin = ll, ymax = ul), alpha = .2) +
geom_line(data = lmer_plot_dat_sustained, aes(color = block)) +
scale_color_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
geom_hline(yintercept = c(1217, 1610), linetype = 2) +
scale_y_continuous(limits = c(1000, 2000)) +
labs(x = "Fear", y = "Reproduction (ms)")
dev.off()
# Chunk 10
subset[, JS_bin_1000.c := (JS_bin_1000 - mean(JS_bin_1000))]
# add rating to the previous model
m.block.js <- lmer(data = subset, reproduction ~ block + JS_bin_1000.c + (block|pp), REML = F)
# calculate Bayes Factor
anova(m.block, m.block.js)
exp((BIC(m.block) - BIC(m.block.js))/2)
summary(m.block.js)
# lmer_plot_dat_acute <- data.table(data.frame(emmeans(m.block.js,
#                                              specs = c("block", "JS_bin_1000.c"),
#                                              at = list(JS_bin_1000.c = seq(min(subset$JS_bin_1000.c), max(subset$JS_bin_1000.c), length.out = 100))
# )))[, .(block, JS_bin_1000.c, reproduction = emmean, ul = asymp.UCL, ll = asymp.LCL, mod = "lmer")]
#
# lmer_plot_acute <- ggplot(subset, aes(x = JS_bin_1000.c, y = reproduction)) +
#   # geom_point(alpha = .1, stroke = 0) +
#   geom_ribbon(data = lmer_plot_dat_acute, aes(fill = block, ymin = ll, ymax = ul), alpha = .2) +
#   geom_line(data = lmer_plot_dat_acute, aes(color = block)) +
#   scale_color_brewer(palette = "Set1") +
#   scale_fill_brewer(palette = "Set1") +
#   geom_hline(yintercept = c(1217, 1610), linetype = 2) +
#   scale_y_continuous(limits = c(1000, 2000)) +
#   labs(title = "Acute Fear (BF < 1)", x = "Fear", y = "Reproduction (ms)") +
#   theme(legend.position = "none")
#
# grid.arrange(lmer_plot_sustained, lmer_plot_acute, nrow = 1)
subset[, pp := as.factor(pp)]
bam.pp <- bam(data = subset, reproduction ~ 1, method = "ML")
bam.pp <- bam(data = subset, reproduction ~ s(pp, bs = "re"), method = "ML")
bam.pp <- bam(data = subset, reproduction ~ s(1), method = "ML")
bam.pp <- bam(data = subset, reproduction ~ s(1, bs = "re"), method = "ML")
bam.block1 <- bam(data = subset, reproduction ~ block + s(pp, bs = "re"), method = "ML")
bam.block <- bam(data = subset, reproduction ~ block + s(pp, by = block, bs = "re"), method = "ML")
exp((BIC(bam.pp) - BIC(bam.block1))/2)
exp((BIC(bam.block) - BIC(bam.block1))/2)
bam.pp <- bam(data = subset, reproduction ~ s(pp, bs = "re"), method = "ML")
bam.block <- bam(data = subset, reproduction ~ block + s(pp, bs = "re"), method = "ML")
bam.block.spline <- bam(data = subset, reproduction ~ block + s(pp, by = block, bs = "re"), method = "ML")
exp((BIC(bam.pp) - BIC(bam.block))/2)
exp((BIC(bam.block) - BIC(bam.block.spline))/2)
summary(bam.block)
exp((BIC(bam.block) - BIC(bam.block.spline))/2)
bam.pp <- bam(data = subset, reproduction ~ s(pp, bs = "re"), method = "ML")
bam.block <- bam(data = subset, reproduction ~ block + s(pp, bs = "re"), method = "ML")
bam.block.spline <- bam(data = subset, reproduction ~ block + s(pp, by = block, bs = "re"), method = "ML")
exp((BIC(bam.pp) - BIC(bam.block))/2)
exp((BIC(bam.block) - BIC(bam.block.spline))/2)
require(raster)
require(ggplot2)
pulsar = function(n){
x = seq(0,100, length=n)
norms = dnorm(x, mean=40, sd=6)*100 + dnorm(x, mean=60, sd=6)*50
noise1 = approx(sample(c(rep(0:8,2),18:19)), n = n, y=NULL)$y
noise2 = approx(sample(0:50), n = n, y=NULL)$y
noise3 = rnorm(n)
abs(norms + norms * noise1 + norms * noise2 * .1 + noise3)
}
d = apply(sapply(rep(100,50), pulsar), 1, rev)
d = data.frame(rasterToPoints(raster(d)))
d$elev = d$layer + d$y * 1200
p = ggplot() +
labs(x = 'UNKNOWN PLEASURES', y = NULL, title = 'JOY DIVISION') +
theme_minimal() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
plot.background = element_rect(fill = "black"),
plot.title = element_text(colour = 'white', size = 76, hjust = .5),
axis.title.x = element_text(colour = 'white', size = 43))
for(g in unique(d$y)){
dat = subset(d, y == g)
p = p + geom_polygon(data=dat, aes(x, elev), fill='black') +
geom_line(data=dat, aes(x, elev), col='white', size=.5)
}
ggsave(filename = 'unknown_pleasures.png', plot = p, w=8, h = 8)
View(d)
setwd("/Volumes/GoogleDrive-103405781638992341338/My Drive/projecten_cloud/kudo_plotter")
library(data.table)
library(ggplot2); theme_set(theme_classic())
library(lme4)
dat <- NULL
followers <- fread("followers.csv")
followers[, date := as.POSIXct(`Created At`, "%b %e, %Y, %r", tz="Europe/Amsterdam")]
followers <- followers[`Follow Status` == "Accepted"]
followers[, followers := 1:.N]
files <- Sys.glob("strava*.csv")
for(f in files){
tdat <- fread(f)
dat <- rbind(dat, tdat , fill = T)
}
dat[, date := start_date_local]
dat <- rbind(followers, dat, fill = T)
setkey(dat, date)
dat[, followers := nafill(followers, type = "nocb")]
dat[, followers := nafill(followers, type = "locf")]
dat[, k.f := kudos_count/followers]
dat <- dat[is.na(`Follower Athlete ID`) ]
subset <- dat[type %in% c("Ride") & visibility != "only_me" & id > 405617303]
m0 <- lm(data = subset, kudos_count ~ 1)
m1 <- lm(data = subset, kudos_count ~ total_photo_count)
summary(m1)
exp((BIC(m0) - BIC(m1))/2)
setwd("/Volumes/GoogleDrive-103405781638992341338/My Drive/projecten_cloud/kudo_plotter")
library(data.table)
library(ggplot2); theme_set(theme_classic())
library(lme4)
dat <- NULL
followers <- fread("followers.csv")
followers[, date := as.POSIXct(`Created At`, "%b %e, %Y, %r", tz="Europe/Amsterdam")]
followers <- followers[`Follow Status` == "Accepted"]
followers[, followers := 1:.N]
files <- Sys.glob("strava*.csv")
for(f in files){
tdat <- fread(f)
dat <- rbind(dat, tdat , fill = T)
}
dat[, date := start_date_local]
dat <- rbind(followers, dat, fill = T)
setkey(dat, date)
dat[, followers := nafill(followers, type = "nocb")]
dat[, followers := nafill(followers, type = "locf")]
dat[, k.f := kudos_count/followers]
dat <- dat[is.na(`Follower Athlete ID`) ]
ggplot(dat[type %in% c("Ride", "VirtualRide", "Run") & visibility != "only_me" & id > 405617303 & k.f < .3], aes(x = date, y = k.f, color = type)) +
geom_smooth(se = F) +
geom_point(alpha = .4, stroke = 0) +
scale_color_brewer(palette = "Set1")
names(dat)
ggplot(dat[type %in% c("Ride") & visibility != "only_me" & id > 405617303], aes(x = average_temp, y = kudos_count)) +
geom_smooth(method = "lm") +
geom_jitter(width = .2, height = 0, alpha = .4, stroke = 0, size  = 2) +
labs(y = "Kudos per Ride", x = "Number of Photo's") +
theme(legend.position = "bottom")
ggplot(dat[type %in% c("Ride") & visibility != "only_me" & id > 405617303], aes(x = average_temp, y = kudos_count)) +
geom_smooth(method = "lm") +
geom_jitter(width = .2, height = 0, alpha = .4, stroke = 0, size  = 2) +
labs(y = "Kudos per Ride", x = "Temperature") +
theme(legend.position = "bottom")
dat[, average_temp]
dat[type == "Ride", average_temp]
dat[average_temp < 10]
